" General {{{
set t_ut=  " Force vim to use the background color for the whole line

"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
if (has("nvim"))
    "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif
"For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
"Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
" < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
if (has("termguicolors"))
    set termguicolors
endif

set background=dark
let g:gruvbox_contrast_dark='soft'
colorscheme gruvbox

filetype plugin indent on
highlight clear SignColumn

" Enable modeline overrides (i.e. # vim: set sw=2)
set modeline

syntax on
set mousehide
scriptencoding utf-8
set encoding=utf-8

if has ('x') && has ('gui') " On Linux use + register for copy-paste
  set clipboard=unnamedplus
elseif has ('gui')          " On mac and Windows, use * register for copy-paste
  set clipboard=unnamed
endif

set cursorline
set viewoptions=folds,options,cursor,unix,slash
set virtualedit=onemore
set history=1000
set hidden
set spell

if filereadable("/usr/share/dict/words")
    set dictionary+="/usr/share/dict/words"
endif
set complete+=k

set splitbelow
set splitright

set backup
set backupcopy=yes
set undofile
set undolevels=1000
set undoreload=10000

set cmdheight=2
set updatetime=300
set shortmess+=c
set signcolumn=yes

set showmode
set lazyredraw

set ruler
set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%)
set showcmd

set ttimeoutlen=0
set timeoutlen=500
set completeopt=menu,preview,longest

set tags=./tags;/,~/.vimtags

let g:UltiSnipsSnippetsDir = expand('$HOME', 1) . '/.vim/'
let g:UltiSnipsSnippetDirectories=["snips"]
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<S-tab>"

autocmd FileType * silent! setlocal formatoptions+=j

let g:SimpylFold_docstring_preview = 1
let g:http_client_verify_ssl = 1

" Always open the quickfix window after running any sort of grep command
autocmd QuickFixCmdPost *grep* cwindow

hi Normal ctermbg=none
" }}}

" UI {{{
let g:tabber_divider_style = 'unicode'
set tabline=%!tabber#TabLine()

set laststatus=2
let g:airline#extensions#branch#enabled = 0
let g:airline#extensions#hunks#enabled = 0

set backspace=indent,eol,start  " Backspace for dummies
set linespace=0                 " No extra spaces between rows
set nu                          " Line numbers on
set showmatch                   " Show matching brackets/parenthesis
set incsearch                   " Find as you type search
set hlsearch                    " Highlight search terms
set winminheight=0              " Windows can be 0 line high
set ignorecase                  " Case insensitive search
set smartcase                   " Case sensitive when uc present
set wildmenu                    " Show list instead of just completing
set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
set scrolljump=5                " Lines to scroll when cursor leaves screen
set scrolloff=3                 " Minimum lines to keep above and below cursor
set foldenable                  " Auto fold code
set list
set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespace
let g:airline_powerline_fonts = 1
let g:airline_theme='tomorrow'
" }}}

" Formatting {{{
set nowrap                      " Wrap long lines
set autoindent                  " Indent at the same level of the previous line
set shiftwidth=4                " Use indents of 4 spaces
set expandtab                   " Tabs are spaces, not tabs
set tabstop=4                   " An indentation every four columns
set softtabstop=4               " Let backspace delete indent
set pastetoggle=<F12>           " pastetoggle (sane indentation on pastes)
" }}}

" General Programming {{{
let g:syntastic_always_populate_loc_list = 1
autocmd FileType {yaml,yml} set ft=yaml ts=2 sw=2 sts=2 smarttab
autocmd Syntax * syntax keyword Todo contained WARN NOTE FIXME XXX TODO ATTN containedin=.*Comment

let g:coc_global_extensions = ["coc-git", "coc-go", "coc-html", "coc-java", "coc-json", "coc-omnisharp", "coc-phpls", "coc-python", "coc-rust-analyzer", "coc-yaml"]
inoremap <silent><expr> <c-space> coc#refresh()

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

nnoremap <nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
nnoremap <nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
inoremap <nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
inoremap <nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
" }}}

" Git {{{
augroup git
    autocmd!
    autocmd BufNewFile,BufRead fugitive://* set bufhidden=delete
    autocmd FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

    autocmd VimEnter * nnoremap <silent> <leader>gs :MagitOnly<CR>
    autocmd VimEnter * nnoremap <silent> <leader>gd :Gdiff<CR>
    autocmd VimEnter * nnoremap <silent> <leader>gc :Gcommit<CR>
    autocmd VimEnter * nnoremap <silent> <leader>gb :Gblame<CR>
    autocmd VimEnter * nnoremap <silent> <leader>gl :Glog<CR>
    autocmd VimEnter * nnoremap <silent> <leader>gw :Gwrite<CR>:GitGutter<CR>
augroup END
" }}}

" Python {{{
let g:jedi#popup_on_dot = 0
let g:pymode_lint_checker = "pyflakes"
let g:pymode_utils_whitespaces = 0
let g:pymode_options = 0
" }}}

" PHP {{{
let g:pdv_template_dir = $HOME."/.vim/plugins/pdv/templates_snip"
let g:php_manual_online_search_shortcut = '<leader>K'

augroup php
    autocmd!
    autocmd FileType php set tabstop=4|set shiftwidth=4 foldlevel=1
    autocmd FileType php set commentstring=//\ %s

    autocmd FileType php noremap <leader>pd :call pdv#DocumentWithSnip()<CR>
    autocmd FileType php nmap <leader>pcf :call PhpCsFixerFixFile()<CR>
    autocmd FileType php setlocal omnifunc=phpactor#Complete

    " Include use statement
    autocmd FileType php nmap <buffer> <Leader>u :call phpactor#UseAdd()<CR>

    " Invoke the context menu
    autocmd FileType php nmap <buffer> <Leader>mm :call phpactor#ContextMenu()<CR>

    " Invoke the navigation menu
    autocmd FileType php nmap <buffer> <Leader>nn :call phpactor#Navigate()<CR>

    " Goto definition of class or class member under the cursor
    autocmd FileType php nmap <buffer> <Leader>o :call phpactor#GotoDefinition()<CR>

    " Transform the classes in the current file
    autocmd FileType php nmap <buffer> <Leader>ft :call phpactor#Transform()<CR>

    " Generate a new class (replacing the current file)
    autocmd FileType php nmap <buffer> <Leader>cc :call phpactor#ClassNew()<CR>

    " Extract expression (normal mode)
    autocmd FileType php nmap <buffer> <silent><Leader>ee :call phpactor#ExtractExpression(v:false)<CR>

    " Extract expression from selection
    autocmd FileType php vmap <buffer> <silent><Leader>ee :<C-U>call phpactor#ExtractExpression(v:true)<CR>

    " Extract method from selection
    vmap <silent><Leader>em :<C-U>call phpactor#ExtractMethod()<CR>
augroup END
" }}}

" Ruby {{{
augroup ruby
    autocmd!
    autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
augroup END
" }}}

" Go {{{
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1

let g:go_fmt_command = "goimports"
let g:go_metalinter_command = "golangci-lint"

augroup go
    autocmd!
    autocmd FileType go let b:noStripWhitespace=1
    " FIXME(mmk) Make shouldn't be within go and why do we need qf?
    autocmd FileType qf let b:noStripWhitespace=1
    autocmd FileType make let b:noStripWhitespace=1

    autocmd FileType go nmap <buffer> <leader>r <Plug>(go-run)
    autocmd FileType go nmap <buffer> <leader>e <Plug>(go-rename)
    autocmd FileType go nmap <buffer> <leader>i <Plug>(go-implements)
    autocmd FileType go nmap <buffer> <leader>l :GoMetaLinter<CR>
    autocmd FileType go nmap <buffer> <leader>t <Plug>(go-test)
    autocmd FileType go nmap <buffer> <leader>c <Plug>(go-coverage)
    autocmd FileType go nmap <buffer> <leader>gv <Plug>(go-vet)
    autocmd FileType go nmap <buffer> <leader>gd <Plug>(go-doc)
augroup END
" }}}

" Rust {{{
let g:rustfmt_autosave = 1
let g:racer_experimental_completer = 1

augroup rust
    autocmd!
    autocmd FileType rust nmap <buffer> gd <Plug>(rust-def)
    autocmd FileType rust nmap <buffer> gs <Plug>(rust-def-split)
    autocmd FileType rust nmap <buffer> gx <Plug>(rust-def-vertical)
    autocmd FileType rust nmap <buffer> gt <Plug>(rust-def-tab)
    autocmd FileType rust nmap <buffer> <leader>gd <Plug>(rust-doc)
augroup END
" }}}

" SQL {{{
" SQLUtil requires Align, but I don't want it to conflict with tabularize
let g:loaded_AlignMapsPlugin = 0
let g:sqlutil_keyword_case = '\U'

augroup sql
    autocmd!
    autocmd FileType sql,mysql set commentstring=--\ %s
    autocmd FileType mysql let b:noClosePreview=1
    " FIXME(mmk) This is a global mapping and doesn't belong here
    autocmd FileType * autocmd CursorMovedI,InsertLeave * call ClosePreviewWindow()

    autocmd FileType sql,mysql vmap <buffer> <leader>fr :SQLUFormatter<CR>
    autocmd FileType sql,mysql nmap <buffer> <leader>fr :SQLUFormatter<CR>
augroup END
" }}}

" Twig {{{
augroup twig
    autocmd!
    autocmd BufNewFile,BufRead *.html.twig set filetype=html.twig
augroup END
" }}}

" HTML {{{
augroup html
    autocmd!
    autocmd FileType html setlocal omnifunc=htmlcomplete#CompleteTags
augroup END
" }}}

" CSS {{{
augroup css
    autocmd!
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
augroup END
" }}}

" JS {{{
augroup javascript
    autocmd!
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
augroup END
" }}}

" XML {{{
augroup xml
    autocmd!
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
augroup END
" }}}

" Markdown {{{
let g:markdown_fenced_languages = ['css', 'erb=eruby', 'javascript', 'js=javascript', 'json=javascript', 'ruby', 'sass', 'sql', 'xml', 'php', 'java']

augroup markdown
    autocmd!
    autocmd FileType markdown setlocal omnifunc=htmlcomplete#CompleteTags conceallevel=0
    autocmd FileType markdown let b:noStripWhitespace=1
augroup END
" }}}

" C# {{{
let g:OmniSharp_timeout = 5
let g:OmniSharp_highlight_types = 3

augroup csharp
    autocmd!

    " Show type information automatically when the cursor stops moving.
    " Note that the type is echoed to the Vim command line, and will overwrite
    " any other messages in this space including e.g. ALE linting messages.
    autocmd CursorHold *.cs OmniSharpTypeLookup

    " The following commands are contextual, based on the cursor position.
    autocmd FileType cs nmap <silent> <buffer> gd <Plug>(omnisharp_go_to_definition)
    autocmd FileType cs nmap <silent> <buffer> <Leader>osfu <Plug>(omnisharp_find_usages)
    autocmd FileType cs nmap <silent> <buffer> <Leader>osfi <Plug>(omnisharp_find_implementations)
    autocmd FileType cs nmap <silent> <buffer> <Leader>ospd <Plug>(omnisharp_preview_definition)
    autocmd FileType cs nmap <silent> <buffer> <Leader>ospi <Plug>(omnisharp_preview_implementations)
    autocmd FileType cs nmap <silent> <buffer> <Leader>ost <Plug>(omnisharp_type_lookup)
    autocmd FileType cs nmap <silent> <buffer> K <Plug>(omnisharp_documentation)
    autocmd FileType cs nmap <silent> <buffer> <Leader>osfs <Plug>(omnisharp_find_symbol)
    autocmd FileType cs nmap <silent> <buffer> <Leader>osfx <Plug>(omnisharp_fix_usings)
    autocmd FileType cs nmap <silent> <buffer> <C-\> <Plug>(omnisharp_signature_help)
    autocmd FileType cs imap <silent> <buffer> <C-\> <Plug>(omnisharp_signature_help)

    " Navigate up and down by method/property/field
    autocmd FileType cs nmap <silent> <buffer> [[ <Plug>(omnisharp_navigate_up)
    autocmd FileType cs nmap <silent> <buffer> ]] <Plug>(omnisharp_navigate_down)
    " Find all code errors/warnings for the current solution and populate the quickfix window
    autocmd FileType cs nmap <silent> <buffer> <Leader>osgcc <Plug>(omnisharp_global_code_check)
    " Contextual code actions (uses fzf, vim-clap, CtrlP or unite.vim selector when available)
    autocmd FileType cs nmap <silent> <buffer> <Leader>osca <Plug>(omnisharp_code_actions)
    autocmd FileType cs xmap <silent> <buffer> <Leader>osca <Plug>(omnisharp_code_actions)
    " Repeat the last code action performed (does not use a selector)
    autocmd FileType cs nmap <silent> <buffer> <Leader>os. <Plug>(omnisharp_code_action_repeat)
    autocmd FileType cs xmap <silent> <buffer> <Leader>os. <Plug>(omnisharp_code_action_repeat)

    autocmd FileType cs nmap <silent> <buffer> <Leader>os= <Plug>(omnisharp_code_format)

    autocmd FileType cs nmap <silent> <buffer> <Leader>osnm <Plug>(omnisharp_rename)

    autocmd FileType cs nmap <silent> <buffer> <Leader>osre <Plug>(omnisharp_restart_server)
    autocmd FileType cs nmap <silent> <buffer> <Leader>osst <Plug>(omnisharp_start_server)
    autocmd FileType cs nmap <silent> <buffer> <Leader>ossp <Plug>(omnisharp_stop_server)

    autocmd FileType cs nnoremap <buffer> <Leader><Space> :OmniSharpGetCodeActions<CR>
    autocmd FileType cs xnoremap <buffer> <Leader><Space> :call OmniSharp#GetCodeActions('visual')<CR>
    autocmd FileType cs nnoremap <buffer> <Leader>nm :OmniSharpRename<CR>
    autocmd FileType cs nnoremap <buffer> <F2> :OmniSharpRename<CR>
    autocmd FileType cs command! <buffer> -nargs=1 Rename :call OmniSharp#RenameTo("<args>")
    autocmd FileType cs nnoremap <buffer> <Leader>cf :OmniSharpCodeFormat<CR>
    autocmd FileType cs nnoremap <buffer> <Leader>th :OmniSharpHighlightTypes<CR>
augroup END
" }}}

" Haskell {{{
let g:haskell_enable_quantification = 1   " to enable highlighting of `forall`
let g:haskell_enable_recursivedo = 1      " to enable highlighting of `mdo` and `rec`
let g:haskell_enable_arrowsyntax = 1      " to enable highlighting of `proc`
let g:haskell_enable_pattern_synonyms = 1 " to enable highlighting of `pattern`
let g:haskell_enable_typeroles = 1        " to enable highlighting of type roles
let g:haskell_enable_static_pointers = 1  " to enable highlighting of `static`
let g:haskell_backpack = 1                " to enable highlighting of backpack keywords
" }}}

" Remove trailing whitespaces and ^M chars {{{
" FIXME(mmk) Decide which augroup you want to make this a part of
autocmd FileType * autocmd BufWritePre <buffer> call StripTrailingWhitespace()
" }}}

" vim: ft=vim foldlevel=0 foldmethod=marker
