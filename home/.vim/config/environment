" General {{{
set t_ut=  " Force vim to use the background color for the whole line

"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
if (has("nvim"))
    "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif
"For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
"Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
" < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
if (has("termguicolors"))
    set termguicolors
endif

set background=dark
let g:gruvbox_contrast_dark='soft'
colorscheme gruvbox

filetype plugin indent on
highlight clear SignColumn

" Enable modeline overrides (i.e. # vim: set sw=2)
set modeline

syntax on
set mousehide
scriptencoding utf-8
set encoding=utf-8

if has ('x') && has ('gui') " On Linux use + register for copy-paste
  set clipboard=unnamedplus
elseif has ('gui')          " On mac and Windows, use * register for copy-paste
  set clipboard=unnamed
endif

set cursorline
set viewoptions=folds,options,cursor,unix,slash
set virtualedit=onemore
set history=1000
set hidden
set spell

if filereadable("/usr/share/dict/words")
    set dictionary+="/usr/share/dict/words"
endif
set complete+=k

set splitbelow
set splitright

set backup
set backupcopy=yes
set undofile
set undolevels=1000
set undoreload=10000

set cmdheight=2
set updatetime=300
set shortmess+=c
set signcolumn=yes

set showmode
set lazyredraw

set ruler
set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%)
set showcmd

set ttimeoutlen=0
set timeoutlen=500
set completeopt=menu,preview,longest

set tags=./tags;/,~/.vimtags

let g:UltiSnipsSnippetsDir = expand('$HOME', 1) . '/.vim/'
let g:UltiSnipsSnippetDirectories=["snips"]
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<S-tab>"

autocmd FileType * silent! setlocal formatoptions+=j

let g:SimpylFold_docstring_preview = 1
let g:http_client_verify_ssl = 1

" Always open the quickfix window after running any sort of grep command
autocmd QuickFixCmdPost *grep* cwindow

hi Normal ctermbg=none
" }}}

" UI {{{
let g:tabber_divider_style = 'unicode'
set tabline=%!tabber#TabLine()

set laststatus=2
let g:airline#extensions#branch#enabled = 0
let g:airline#extensions#hunks#enabled = 0

set backspace=indent,eol,start  " Backspace for dummies
set linespace=0                 " No extra spaces between rows
set nu                          " Line numbers on
set showmatch                   " Show matching brackets/parenthesis
set incsearch                   " Find as you type search
set hlsearch                    " Highlight search terms
set winminheight=0              " Windows can be 0 line high
set ignorecase                  " Case insensitive search
set smartcase                   " Case sensitive when uc present
set wildmenu                    " Show list instead of just completing
set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
set scrolljump=5                " Lines to scroll when cursor leaves screen
set scrolloff=3                 " Minimum lines to keep above and below cursor
set foldenable                  " Auto fold code
set list
set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespace
let g:airline_powerline_fonts = 1
let g:airline_theme='tomorrow'
" }}}

" Formatting {{{
set nowrap                      " Wrap long lines
set autoindent                  " Indent at the same level of the previous line
set shiftwidth=4                " Use indents of 4 spaces
set expandtab                   " Tabs are spaces, not tabs
set tabstop=4                   " An indentation every four columns
set softtabstop=4               " Let backspace delete indent
set pastetoggle=<F12>           " pastetoggle (sane indentation on pastes)
" }}}

" General Programming {{{
let g:syntastic_always_populate_loc_list = 1
autocmd FileType {yaml,yml} set ft=yaml ts=2 sw=2 sts=2 smarttab
autocmd Syntax * syntax keyword Todo contained WARN NOTE FIXME XXX TODO ATTN containedin=.*Comment

let g:coc_global_extensions = ["coc-git", "coc-go", "coc-html", "coc-java", "coc-json", "coc-omnisharp", "coc-phpls", "coc-python", "coc-rust-analyzer", "coc-yaml"]
inoremap <silent><expr> <c-space> coc#refresh()

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

nnoremap <nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
nnoremap <nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
inoremap <nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
inoremap <nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
" }}}

" Git {{{
augroup git
    autocmd!
    autocmd BufNewFile,BufRead fugitive://* set bufhidden=delete
    autocmd FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

    autocmd VimEnter * nnoremap <silent> <leader>gs :MagitOnly<CR>
    autocmd VimEnter * nnoremap <silent> <leader>gd :Gdiff<CR>
    autocmd VimEnter * nnoremap <silent> <leader>gc :Gcommit<CR>
    autocmd VimEnter * nnoremap <silent> <leader>gb :Gblame<CR>
    autocmd VimEnter * nnoremap <silent> <leader>gl :Glog<CR>
    autocmd VimEnter * nnoremap <silent> <leader>gw :Gwrite<CR>:GitGutter<CR>
augroup END
" }}}

" SQL {{{
" SQLUtil requires Align, but I don't want it to conflict with tabularize
let g:loaded_AlignMapsPlugin = 0
let g:sqlutil_keyword_case = '\U'

augroup sql
    autocmd!
    autocmd FileType sql,mysql set commentstring=--\ %s
    autocmd FileType mysql let b:noClosePreview=1
    " FIXME(mmk) This is a global mapping and doesn't belong here
    autocmd FileType * autocmd CursorMovedI,InsertLeave * call ClosePreviewWindow()

    autocmd FileType sql,mysql vmap <buffer> <leader>fr :SQLUFormatter<CR>
    autocmd FileType sql,mysql nmap <buffer> <leader>fr :SQLUFormatter<CR>
augroup END
" }}}

" Twig {{{
augroup twig
    autocmd!
    autocmd BufNewFile,BufRead *.html.twig set filetype=html.twig
augroup END
" }}}

" Remove trailing whitespaces and ^M chars {{{
" FIXME(mmk) Decide which augroup you want to make this a part of
autocmd FileType * autocmd BufWritePre <buffer> call StripTrailingWhitespace()
" }}}

" vim: ft=vim foldlevel=0 foldmethod=marker
